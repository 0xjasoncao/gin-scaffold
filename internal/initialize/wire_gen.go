// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package initialize

import (
	"context"
	"gin-scaffold/internal/apis"
	"gin-scaffold/internal/apis/docs"
	system3 "gin-scaffold/internal/apis/system"
	"gin-scaffold/internal/apis/system/v1"
	"gin-scaffold/internal/config"
	"gin-scaffold/internal/initialize/provider"
	"gin-scaffold/internal/repository"
	"gin-scaffold/internal/repository/system"
	"gin-scaffold/internal/service"
	system2 "gin-scaffold/internal/service/system"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context, config2 *config.Config) (*ApiInjector, func(), error) {
	factory, cleanup, err := provider.InitRedisFactory(ctx, config2)
	if err != nil {
		return nil, nil, err
	}
	service, cleanup2, err := provider.InitTokenService(ctx, config2, factory)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	swaggerHandler := docs.NewSwaggerHandler(config2)
	db, cleanup3, err := provider.InitGorm(ctx, config2)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userRepo := system.NewUserRepo(db)
	userService := system2.NewUserService(userRepo)
	userHandler := v1.NewUserHandler(userService, service)
	systemV1 := &system3.V1{
		User: userHandler,
	}
	handlers := &system3.Handlers{
		V1: systemV1,
	}
	routerHandlers := &apis.RouterHandlers{
		Swagger: swaggerHandler,
		System:  handlers,
	}
	engine := provider.NewRouter(ctx, config2, service, routerHandlers, factory)
	apiInjector := &ApiInjector{
		Engine: engine,
	}
	return apiInjector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type ApiInjector struct {
	Engine *gin.Engine
}

var ProviderSet = wire.NewSet(provider.BasicProviderSet, repository.ProviderSet, service.ProviderSet, apis.ProviderSet, wire.Struct(new(ApiInjector), "*"))
